#! /bin/bash

### BEGIN INIT INFO
# GlobaLeaks startup script for Ubuntu and Debian Linux servers
#
# cp globaleaks.init /etc/init.d/globaleaks
#
# To automatically start at reboot
# sudo update-rc.d globaleaks defaults
#
# Provides:          globaleaks
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: globaleaks initscript
# Description:       This file starts up the globaleaks server.
### END INIT INFO

# Author: Giovanni Pellerano <evilaliv3@globaleaks.org>

###############################################################################

# Start of Configurable Arguments

# USER = [user_name]
#   permits to configure the USER privileges of the globaleaks process
USER=globaleaks

# GROUP = [group_name]
#   permits to configure the GROUP privileges of the globaleaks process
GROUP=globaleaks

# HOST = [ip_address, hostname, other_hostname]
#   permits to configure a list of hosts at which globaleaks will be reachable
HOSTS_LIST=127.0.0.1,localhost

# NETWORKSANDBOX = 0/1
#   permits to enable network sandboxing; requires iptables
NETWORK_SANDBOXING=1

# ALLOWED_DST_IP = ( ip_address1,  ip_address2, ... )
#   permits to configure a list of ip address used for outbound connections
ALLOWED_SRC_IP=( "127.0.0.1" )

# ALLOWED_SRC_IP = ( ip_address1,  ip_address2, ... )
#   permits to configure a list of ip address used for inbound connections
ALLOWED_DST_IP=( "127.0.0.1" )

# LISTENINGPORT = [port_number]
#   permits to configure a port at which globaleaks process will bind to
LISTENING_PORT=8082

# TORSOCKSPORT = [port_number]
#   permits to configure a Tor Sock Port for outbound connections
TORSOCKSPORT=9050

# TORTRANSPORT = [port_number]
#   permits to configure a Tor Trans Port for outbound connections
TORTRANSPORT=9040

# TORDNSPORT = [port_number]
#   permits to configure a Tor DNS Port for outbound connections
TORDNSPORT=5353

# WORKING_DIR
#   must be configured with the daemon working directory
WORKING_DIR=/var/globaleaks/

# End of Configurable Arguments

###############################################################################

GLBACKEND_DAEMON=`which globaleaks`
if [ ! ${GLBACKEND_DAEMON} ]; then
    echo "Error: Globlaleaks is not installed"
    exit 1
fi

GLBACKEND_ARGS="--port=${LISTENING_PORT} --accept-host=${HOSTS_LIST} --user=${USER} --group=${GROUP} --working-path=${WORKING_DIR}"

STARTCMD="${GLBACKEND_DAEMON} ${GLBACKEND_ARGS}"

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=$(basename $(readlink -nf $0))

SCRIPTNAME=$0
GLBACKEND_PIDFILE=${WORKING_DIR}/twistd.pid

if [[ $EUID -ne 0 ]]; then
   echo "Error: GlobaLeaks init script must be run as root" 1>&2
   exit 1
fi


if ! id -u ${USER} >/dev/null 2>&1; then
   echo "Error: unexistent user (${USER})"
   exit 1
fi

if [ ${NETWORK_SANDBOXING} -eq 1 ] && ! which iptables >/dev/null 2>&1 ; then
    echo "Error: GlobaLeaks Network Sandboxing requires iptables"
    exit 1
fi

if [ -e ${GLBACKEND_PIDFILE} ]; then
    GLBACKEND_PID=`cat ${GLBACKEND_PIDFILE}`
else
    GLBACKEND_PID=0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

network_sandboxing_start()
{
    echo "Enabling GlobaLeaks Network Sandboxing..."

    iptables -L | grep ${USER} 1<&- 2<&-
    if [ $? -eq 0 ]; then
        echo "already enabled."
        return
    fi

    # INBOUND
    for IP_DST in "${ALLOWED_DST_IP[@]}"
    do
        for IP_SRC in "${ALLOWED_SRC_IP[@]}"
        do
            iptables -A INPUT -p tcp -d ${IP_DST} --dport ${LISTENING_PORT} -s ${IP_SRC} -j ACCEPT
        done
        iptables -A INPUT -p tcp -d ${IP_DST} --dport ${LISTENING_PORT}  -j DROP
    done


    # OUTBOUND
    # All outbound connections from GlobaLeaks goes trough Tor
    iptables -t nat -A OUTPUT ! -o lo -p tcp -m owner --uid-owner ${USER} -m tcp -j REDIRECT --to-ports ${TORTRANSPORT}
    iptables -t nat -A OUTPUT ! -o lo -p udp -m owner --uid-owner ${USER} -m udp --dport 53 -j REDIRECT --to-ports ${TORDNSPORT}
    iptables -t filter -A OUTPUT -p tcp -m owner --uid-owner ${USER} -m tcp --dport ${TORTRANSPORT} -j ACCEPT
    iptables -t filter -A OUTPUT -p udp -m owner --uid-owner ${USER} -m udp --dport 53 -j ACCEPT
    iptables -t filter -A OUTPUT -p tcp -m owner --uid-owner ${USER} -m tcp -d 127.0.0.1 --dport ${TORSOCKSPORT} -j ACCEPT
    iptables -t filter -A OUTPUT ! -o lo -m owner --uid-owner ${USER} -j DROP

    echo "done."
}

network_sandboxing_stop()
{
    echo "Disabling GlobaLeaks Network Sandboxing..."

    iptables -L | grep ${USER} 1<&- 2<&-
    if [ $? -ne 0 ]; then
        echo "already disabled."
        return
    fi

    # INBOUND
    for IP_DST in "${ALLOWED_DST_IP[@]}"
    do
        for IP_SRC in "${ALLOWED_SRC_IP[@]}"
        do
            iptables -D INPUT -p tcp -d ${IP_DST} --dport ${LISTENING_PORT}  -s ${IP_SRC} -j ACCEPT
        done
        iptables -D INPUT -p tcp -d ${IP_DST} --dport ${LISTENING_PORT}  -j DROP
    done

    # OUTBOUND
    # All outbound connections from GlobaLeaks goes trough Tor
    iptables -t nat -D OUTPUT ! -o lo -p tcp -m owner --uid-owner ${USER} -m tcp -j REDIRECT --to-ports ${TORTRANSPORT}
    iptables -t nat -D OUTPUT ! -o lo -p udp -m owner --uid-owner ${USER} -m udp --dport 53 -j REDIRECT --to-ports ${TORDNSPORT}
    iptables -t filter -D OUTPUT -p tcp -m owner --uid-owner ${USER} -m tcp --dport ${TORTRANSPORT} -j ACCEPT
    iptables -t filter -D OUTPUT -p udp -m owner --uid-owner ${USER} -m udp --dport 53 -j ACCEPT
    iptables -t filter -D OUTPUT -p tcp -m owner --uid-owner ${USER} -m tcp -d 127.0.0.1 --dport ${TORSOCKSPORT} -j ACCEPT
    iptables -t filter -D OUTPUT ! -o lo -m owner --uid-owner ${USER} -j DROP

    echo "done."
}

do_start()
{
    echo "Starting GlobaLeaks..."

    # Check to see if the GLBackend daemon is already running.
    if [ "${GLBACKEND_PID}" -ne "0" ]; then
      if kill -0 ${GLBACKEND_PID} 1<&- 2<&-; then
        echo "GlobaLeaks already running at pid ${GLBACKEND_PID}"
        return
      fi
    fi

    network_sandboxing_start

    if ${STARTCMD}; then
        echo "started."
    else
        echo "problem when starting. aborting."
    fi
}

do_stop()
{
    echo "Stopping GlobaLeaks..."

    # this is always needed
    rm -f ${GLBACKEND_PIDFILE} 1<&- 2<&-

    if [ "${GLBACKEND_PID}" -eq "0" ] || [ kill -0 ${GLBACKEND_PID} 1<&- 2<&- ]; then
        echo "not running."
        return
    else
        kill -15 ${GLBACKEND_PID} 1<&- 2<&-
        echo "stopped."
    fi

    network_sandboxing_stop
}

do_restart()
{
    do_stop

    GLBACKEND_PID=0

    do_start
}

#
# Function that queries the status of the daemon/service
#
do_status()
{
    return
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_restart
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
