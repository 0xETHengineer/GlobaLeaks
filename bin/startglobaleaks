#!/usr/bin/env python
# -*- encoding: utf-8 -*-

from __future__ import with_statement

import os
import re
import sys
import random
import pip

from pkg_resources import parse_version

this_directory = os.path.dirname(__file__)
root = os.path.abspath(os.path.join(this_directory, '..'))
sys.path.insert(0, root)

def pip_version_check():
    def version_number_compare(version1, version2):
        return cmp(parse_version(version1), parse_version(version2))

    installed_packages = dict()
    for dist in pip.get_installed_distributions(local_only=False):
        installed_packages[dist.project_name.lower()] = dist.version

    unmet_requirements = []
    with open(root + "/requirements.txt", "r") as rf:
        p = re.compile('\s*(?P<package>[a-zA-Z0-9_.]+)(?P<condition>([<=>]){2}|([<>]){1})?(?P<version>\S+)?')
        while 1:
            requirement = rf.readline().strip()
            if not requirement:
                break
            match = p.match(requirement)
            if match:
                package = match.group('package').lower()
                version = match.group('version')
                condition = match.group('condition')

                if package not in installed_packages:
                    unmet_requirements.append(requirement)
                    continue

                if condition:
                    installed_version = installed_packages[package]
                    check = version_number_compare(installed_version, version)
                    if condition == "<":
                        if check >= 0:
                            unmet_requirements.append(requirement)
                            continue
                    elif condition == "<=":
                        if check > 0:
                            unmet_requirements.append(requirement)
                            continue
                    elif condition == "==":
                        if check != 0:
                            unmet_requirements.append(requirement)
                            continue
                    elif condition == ">=":
                        if check < 0:
                            unmet_requirements.append(requirement)
                            continue
                    elif condition == ">":
                        if check <= 0:
                            unmet_requirements.append(requirement)
                            continue

    if unmet_requirements:
        print "Some GlobaLeaks requirements are unmet in pyenv environment\n"
        print "Unmet requirements:"
        for unmet_requirement in unmet_requirements:
            print "\t" + unmet_requirement
        print "\n"
        print "The problem can be solved by:"
        print "1) Following the guidelines at https://github.com/globaleaks/GlobaLeaks/wiki/Linux"
        print "   [ and verify that you're inside the pyenv! ]"
        print "2) Installing missing requirements using pip install -r requirements.txt"
        quit()

pip_version_check()

from globaleaks.utils import query_yes_no
from globaleaks.settings import GLSetting
from twisted.python import usage


###
# eadem mutata resurgo https://gitorious.org/gulch-ann/gulch-ann/blobs/master/src/python/pyl.py#line222
###
def colorize(txt, col):
    """

    Colorized output.

    Plataform dependent: Linux

    """

    color_dict = {
            'GREY':   0, 'RED':   1, 'GREEN':   2,
            'YELLOW': 3, 'BLUE':  4, 'MAGENTA': 5,
            'CYAN':   6, 'WHITE': 7, 'BLACK':   8
            }
    return '\033[1;3%dm%s\033[0m' %(color_dict[col], txt)


print colorize("""
MMMMMMMMM.$$$$$$$$$$$$$$$Z.DNNNNNNNNNNNNNNN .NNNNNNNNNNNNNNNZ.NNNNNNNNNNNNNNNN M
MMMMMMMM Z$ZZZZZZZZZZZZZ$..NNNNNNNNNNNNNNN7.NNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNM.M
MMMMMMM.,Z$ZZZZZZZZZZZZZ=.NNNNNNNNNNNNNNNM.NNNNNNNNNNNNNNNN.DNNNNNNNNNNNNNNNNM.M
MMMMMM+.ZZZZZZZZZZZZZZZZ.MNNNNNNNNNNNNNNM.NNNNNNNNNNNNNNNN ,NNNNNNNNNNNNNNNNNM.M
MMMMMN.$ZZZZZZZZZZZZZZ$.NNNNNNNNNNNNNNNN.:NNNNNNNNNNNNNNM=.NNNNNNNNNNNNNNNNNNM.M
MMMMM.Z$ZZZZZ$ZZZZZZZ$.ZNNNNNNNNNNNNNNN..NNNNNNNNNNNNNNN$.NNNNNNNNNNNNNNNNNNNM.M
MMMM.IZZZZZ~.+ZZZZZZ$..MNNNNM..NNNNNNN8.NNNNNN..NNNNNNNN.MNNNNN..MNNNNNNNNNNNM.M
MMM..ZZZZZZZZZZZZZZ$I.NNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNM.8NNNNNNNNNNNNNNNNNNNNM.M
MMO.ZZZZZZZZZZZZZZZZ.MNNNNNNNNNNNNNNN.DNNNNNNNNNNNNNNN.=NNNNNNNNNNNNNNNNNNNNNM M
MM.ZZZZZZZZZZZZZZZZ.NNNNNNNNNNNNNNNN.~NNNNNNNNNNNNNNN~.NNNNNNNNNNNNNNNNNNNNNNM.M
M.$$$$Z$ZZZZZZZZZ$.,NNNNNNNNNNNNNNN= NNNNNNNNNNNNNNN8.NNNNNNNNNNNNNNNNNNNNNNNM M
   .. Z$ZZZZZZZZZ......,NNNNNNNNNN$......NNNNNNNNNNM......NNNNNNNNNNNNNNNNNNNM M
MMMMM ZZZZZZZZZZZZZZZ$..NNNNNNNNNNNNNNN: +NNNNNNNNNNNNNN8.:MNNNNNNNNNNNNNNNNNM M
MMMM.?ZZZZZZZZZZZ$$=.?   :.MNNNNNNNN8.~. .$.INNNNNNNNN.,   ..:MNNNNNNNNNNNNNNM M
MMMM.$Z$ZZZZZZZZZZZ       ..NNNNNNNN  . .   .MNNNNNNN.        ?NNNNNNNNNNNNNNM M
MMM . .Z$ZZZZZZ$Z7.        .NNNNNNM.         MNNNNNN.         ?NNNNNNNNNNNNNNM M
MMM . ..ZZZZZZZZ$      .   .M:NNNN.         .N7?NNN:          ?N:MNNNNNNNNNNNM M
MM:.. ..7ZZZZZZZ$             .MNN.         ..  MNN:    .     =. =NNNNNNNNNNNM M
MM... ..$ZZZZZZZ$             7NNN.   . .     ..NNN:            .NNNNNNNNNNNNM M
M8.::~ZZZZZZZZZZ$           ..MNNN.           .NNNN:            ONNNNNNNNNNNNM M
M.$ZZZZZZZZZZZZZ$ . .     . .NNNNN.   . .     .NNNN:            NNNNNNNNNNNNNM M
M.ZZZZZZZZZZZZZZ$ . .       .NNNNN.         ..NNNNN:          .NNNNNNNNNNNNNNM M
""", random.choice(('RED', 'GREEN', 'BLUE', 'YELLOW', 'CYAN')))


header = [
    [15*" "+"  ____ _       _          ", " _ ", 15*" "+" _ "+18*" "],
    [15*" "+"/ ____| |     | |         ", "| |", 15*" "+"| |"+18*" "],
    [14*" "+"| |  __| | ___ | |__   __ _", "| |", "      ___  __ _| | _____            "],
    [14*" "+"| | |_ | |/ _ \| '_ \ / _\`", "| |", "     / _ \/ _\`| |/ / __|           "],
    [14*" "+"| |__| | | (_) | |_) | (_| ", "| |____", "|  __/ (_| |   <\__ \           "],
    [15*" "+"\_____|_|\___/|_.__/ \__,_", "|______|", "\___|\__,_|_|\_\___/           "],
]

for txt1, l, txt2 in header:
    print colorize(txt1, 'RED') + colorize(l, 'MAGENTA') + colorize(txt2, 'RED')

print '\n'
print colorize('Welcome', 'CYAN'), colorize('to', 'YELLOW'), 'Globa'+colorize('Leaks', 'RED')
print ("Alpha release of GlobaLeaks 0.2.\n"
       "Actually, you may require our supports to makes GL works: irc.freenode.net #globaleaks can help you")

GLSetting.parser.add_option("-n", "--nodaemon", action='store_true',
    help="don't daemonize [default: %s]" % GLSetting.nodaemon,
    dest="nodaemon", default=GLSetting.nodaemon)

GLSetting.parser.add_option("-s", "--storm", action='store_true',
    help="enable storm debugging [default: %r]" % GLSetting.db_debug,
    dest="storm", default=GLSetting.db_debug)

GLSetting.parser.add_option("-p", "--port", type="int",
    help="TCP port used for listening (default: %s)" % GLSetting.bind_port,
    dest="port", default=GLSetting.bind_port)

GLSetting.parser.add_option("-l", "--loglevel", type="choice",
    choices=['INFO', 'WARNING', 'ERROR', 'CRITICAL', 'DEBUG'],
    help="set log level: [default: %s]" % GLSetting.loglevel,
    dest="loglevel", default=GLSetting.loglevel)

GLSetting.parser.add_option("-i", "--io", type="int",
    help="enable JSON I/O logging limiting number of Request/Response (-1=disabled, 0=unlimited) [default: %i]" % GLSetting.cyclone_debug,
    dest="io", default=GLSetting.cyclone_debug)

GLSetting.parser.add_option("-a", "--accept-host", type="string",
    help="specify a list comma separated of hostname acceptable by the HTTP server"\
    "[%s] If some hosts are specified, defaults are not more included in the allowed list)" % GLSetting.accepted_hosts,
    dest="host_list", default=GLSetting.accepted_hosts)

GLSetting.parser.add_option("-o", "--socks-host", type="string",
    help="Socks host to use for Tor [default: %s]" % GLSetting.socks_host,
    dest="socks_host", default=GLSetting.socks_host)

GLSetting.parser.add_option("-P", "--socks-port", type="int",
    help="Socks port to use for Tor [default: %s]" % GLSetting.socks_port,
    dest="socks_port", default=GLSetting.socks_port)

GLSetting.parser.add_option("-d", "--disable-tor-socks", action='store_true',
    help="use tor socks for notification [default: False]",
    dest="disable_tor_socks", default=(not GLSetting.tor_socks_enable))

GLSetting.parser.add_option("-u", "--user", type="string",
    help="the user to run as. [default: current_user]",
    dest="user")

GLSetting.parser.add_option("-g", "--group", type="string",
    help="the group to run as. [default: current_user]",
    dest="group")

GLSetting.parser.add_option("-w", "--working-path", type="string",
    help="define the glbackend working directory [default: %s]" % GLSetting.working_path,
    dest="working_path", default=GLSetting.working_path)

GLSetting.parser.add_option("-c", "--start-clean", action='store_true',
    help="start a clean globaleks install [default: %r]" % GLSetting.start_clean,
    dest="start_clean", default=GLSetting.start_clean)

GLSetting.parser.add_option("-k", "--kill", type="int",
    help="signal to send to the current twisted.pid process (if exists), [default: don't kill]",
    dest="kill", default=0)

# here the options are parsed, because sys.argv array is whack below
(GLSetting.cmdline_options, args) = GLSetting.parser.parse_args()

GLSetting.load_cmdline_options()

if GLSetting.start_clean:
    if query_yes_no("Globaleaks --start-clean is going to delete %s\nAre you sure?" % GLSetting.working_path, "no"):
        GLSetting.remove_directories()
elif GLSetting.cmdline_options.kill:
    try:
        with open(GLSetting.pidfile_path, "r") as fd:
            target_pid = int(fd.read())
            os.kill(target_pid, GLSetting.cmdline_options.kill)
            os.remove(GLSetting.pidfile_path)
    except Exception as excep:
        print "Unable kill PID found in %s: kill option ignored (%s)" %\
              ( GLSetting.pidfile_path, excep.strerror )

GLSetting.drop_privileges()
GLSetting.create_directories()
GLSetting.check_directories()

backend_script = os.path.join(GLSetting.root_path, 'globaleaks', 'backend.py')

args = []
args +=['-y', backend_script]
if GLSetting.nodaemon:
    args += ['-n']
# we does not need this due to GLSetting.drop_privileges()
# in fact we need to drop privileges before directory creation
#args +=['--uid', GLSetting.user]
#args +=['--gid', GLSetting.group]args +=['--rundir', GLSetting.working_path]
args +=['--pidfile', GLSetting.pidfile_path]

# critical and error loglevel do not collect the HTTP request collection
if GLSetting.cmdline_options.loglevel in [ "DEBUG", "INFO", "WARNING" ]:
    args +=['--logfile', os.path.join(GLSetting.working_path, 'twistd.log')]

sys.argv[1:] = args

def run_glbackend():
    from globaleaks import runner

    from globaleaks.utils import log, mail_exception
    log.start_logging()

    sys.excepthook = mail_exception

    config = runner.ServerOptions()
    try:
        config.parseOptions()
    except usage.error, ue:
        print "%s: %s" % (sys.argv[0], ue)
    else:
        print "Starting GlobaLeaks"
        runner.GLBaseRunner(config).run()
        # this is a blocking operation, until app exit
        print "Exiting GlobaLeaks"

run_glbackend()
