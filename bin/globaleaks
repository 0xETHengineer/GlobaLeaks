#!/usr/bin/env python
# -*- encoding: utf-8 -*-

from __future__ import with_statement

import os
import random
import re
import sys

import pip
from pkg_resources import parse_version

def pip_version_check(path):
    def version_number_compare(version1, version2):
        return cmp(parse_version(version1), parse_version(version2))

    installed_packages = dict()
    for dist in pip.get_installed_distributions(local_only=False):
        installed_packages[dist.project_name.lower()] = dist.version

    unmet_requirements = []
    with open(path, "r") as rf:
        p = re.compile('\s*(?P<package>[a-zA-Z0-9_.]+)(?P<condition>([<=>]){2}|([<>]){1})?(?P<version>\S+)?')
        while 1:
            requirement = rf.readline().strip()
            if not requirement:
                break
            match = p.match(requirement)
            if match:
                package = match.group('package').lower()
                version = match.group('version')
                condition = match.group('condition')

                if package in installed_packages:
                    pass
                elif package.replace('_', '-') in installed_packages:
                    package = package.replace('_', '-')
                else:
                    unmet_requirements.append(requirement)
                    continue

                if condition:
                    installed_version = installed_packages[package]
                    check = version_number_compare(installed_version, version)
                    if condition == "<":
                        if check >= 0:
                            unmet_requirements.append(requirement)
                            continue
                    elif condition == "<=":
                        if check > 0:
                            unmet_requirements.append(requirement)
                            continue
                    elif condition == "==":
                        if check != 0:
                            unmet_requirements.append(requirement)
                            continue
                    elif condition == ">=":
                        if check < 0:
                            unmet_requirements.append(requirement)
                            continue
                    elif condition == ">":
                        if check <= 0:
                            unmet_requirements.append(requirement)
                            continue

    if unmet_requirements:
        print "Some GlobaLeaks requirements are unmet\n"
        print "Unmet requirements:"
        for unmet_requirement in unmet_requirements:
            print "\t" + unmet_requirement
        print "\n"
        print "The problem can be solved by:"
        print "1) Following the guidelines at https://github.com/globaleaks/GlobaLeaks/wiki/Linux"
        print "2) Installing missing requirements using pip install -r requirements.txt"
        quit(-1)

this_directory = os.path.dirname(__file__)
root = os.path.abspath(os.path.join(this_directory, '..'))
sys.path.insert(0, root)

path = '/usr/share/globaleaks/glbackend/requirements.txt'
if os.path.exists(path):
    pip_version_check(path)
else:
    pip_version_check(os.path.join(root, 'requirements.txt'))

from globaleaks import runner, DATABASE_VERSION
from globaleaks.utils import log, mail_exception, query_yes_no, caller_name
from globaleaks.settings import GLSetting
from twisted.python import usage

###
# eadem mutata resurgo https://gitorious.org/gulch-ann/gulch-ann/blobs/master/src/python/pyl.py#line222
###
def colorize(txt, col):
    """

    Colorized output.

    Plataform dependent: Linux

    """

    color_dict = {
            'GREY':   0, 'RED':   1, 'GREEN':   2,
            'YELLOW': 3, 'BLUE':  4, 'MAGENTA': 5,
            'CYAN':   6, 'WHITE': 7, 'BLACK':   8
            }
    return '\033[1;3%dm%s\033[0m' %(color_dict[col], txt)

GLSetting.parser.add_option("-n", "--nodaemon", action='store_true',
    help="don't daemonize [default: %default]",
    dest="nodaemon", default=GLSetting.nodaemon)

GLSetting.parser.add_option("-l", "--loglevel", type="choice",
    choices=['CRITICAL', 'ERROR', 'INFO', 'DEBUG'],
    help="set log level [default: %default]",
    dest="loglevel", default=GLSetting.loglevel)

GLSetting.parser.add_option("-s", "--storm-debug", action='store_true',
    help="enable storm debugging [default: %default]",
    dest="storm_debug", default=GLSetting.storm_debug)

GLSetting.parser.add_option("-t", "--twistd-log", action='store_true',
    help="enable the twistd log file (default: %default)",
    dest="twistd_log", default=GLSetting.twistd_log)

GLSetting.parser.add_option("-j", "--jsondump", type="int",
    help="enable JSON I/O logging and limists number of Requests/Responses (-1=disabled, 0=unlimited) [default: %default]",
    dest="io", default=GLSetting.cyclone_debug)

GLSetting.parser.add_option("-p", "--port", type="int",
    help="TCP port used for listening [default: %default]",
    dest="port", default=GLSetting.bind_port)

GLSetting.parser.add_option("-a", "--accept-host", type="string",
    help="specify a list comma separated of hostname acceptable by the HTTP server"\
            "If some hosts are specified, defaults are not more included in the allowed list) [default: %default]",
    dest="host_list", default=GLSetting.accepted_hosts)

GLSetting.parser.add_option("-o", "--socks-host", type="string",
    help="set Socks host to use for Tor [default: %default]",
    dest="socks_host", default=GLSetting.socks_host)

GLSetting.parser.add_option("-P", "--socks-port", type="int",
    help="set Socks port to use for Tor [default: %default]",
    dest="socks_port", default=GLSetting.socks_port)

GLSetting.parser.add_option("-d", "--disable-tor-socks", action='store_true',
    help="disable Tor Socks for notifications [default: Tor enabled]",
    dest="disable_tor_socks", default=(not GLSetting.tor_socks_enable))

GLSetting.parser.add_option("-u", "--user", type="string",
    help="set the user to run as [default: current_user]",
    dest="user")

GLSetting.parser.add_option("-g", "--group", type="string",
    help="set the group to run as [default: current_user]",
    dest="group")

GLSetting.parser.add_option("-w", "--working-path", type="string",
    help="set the glbackend working directory [default: %default]",
    dest="working_path", default=GLSetting.working_path)

GLSetting.parser.add_option("-c", "--start-clean", action='store_true',
    help="start a clean globaleks install [default: %default]",
    dest="start_clean", default=GLSetting.start_clean)

GLSetting.parser.add_option("-k", "--kill", type="int",
    help="signal to send to the current twisted.pid process (if exists) [default: don't kill]",
    dest="kill", default=0)

GLSetting.parser.add_option("-z", "--devel-mode", action='store_true',
    help="override --working-path with 'workingdir/' [default: %default]",
    dest="devel_mode", default=GLSetting.devel_mode)

GLSetting.parser.add_option("-C", "--glc-path", type='string',
    help="specify GLClient path [default: %default] "\
            "(must be used together with --devel-mode)",
    dest="glc_path", default=GLSetting.glc_path)

GLSetting.parser.add_option("-v", "--version", action='store_true',
    help="show the version of the software (spoiler: %s)" % GLSetting.version_string,
    dest="version")

# here the options are parsed, because sys.argv array is whack below
(GLSetting.cmdline_options, args) = GLSetting.parser.parse_args()

if GLSetting.cmdline_options.version:
    print "GlobaLeaks Version:", GLSetting.version_string
    print "GlobaLeaks DB version:", DATABASE_VERSION
    quit()

GLSetting.load_cmdline_options()

print colorize("""
MMMMMMMMM.$$$$$$$$$$$$$$$Z.DNNNNNNNNNNNNNNN .NNNNNNNNNNNNNNNZ.NNNNNNNNNNNNNNNN M
MMMMMMMM Z$ZZZZZZZZZZZZZ$..NNNNNNNNNNNNNNN7.NNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNNM.M
MMMMMMM.,Z$ZZZZZZZZZZZZZ=.NNNNNNNNNNNNNNNM.NNNNNNNNNNNNNNNN.DNNNNNNNNNNNNNNNNM.M
MMMMMM+.ZZZZZZZZZZZZZZZZ.MNNNNNNNNNNNNNNM.NNNNNNNNNNNNNNNN ,NNNNNNNNNNNNNNNNNM.M
MMMMMN.$ZZZZZZZZZZZZZZ$.NNNNNNNNNNNNNNNN.:NNNNNNNNNNNNNNM=.NNNNNNNNNNNNNNNNNNM.M
MMMMM.Z$ZZZZZ$ZZZZZZZ$.ZNNNNNNNNNNNNNNN..NNNNNNNNNNNNNNN$.NNNNNNNNNNNNNNNNNNNM.M
MMMM.IZZZZZ~.+ZZZZZZ$..MNNNNM..NNNNNNN8.NNNNNN..NNNNNNNN.MNNNNN..MNNNNNNNNNNNM.M
MMM..ZZZZZZZZZZZZZZ$I.NNNNNNNNNNNNNNNN.NNNNNNNNNNNNNNNM.8NNNNNNNNNNNNNNNNNNNNM.M
MMO.ZZZZZZZZZZZZZZZZ.MNNNNNNNNNNNNNNN.DNNNNNNNNNNNNNNN.=NNNNNNNNNNNNNNNNNNNNNM M
MM.ZZZZZZZZZZZZZZZZ.NNNNNNNNNNNNNNNN.~NNNNNNNNNNNNNNN~.NNNNNNNNNNNNNNNNNNNNNNM.M
M.$$$$Z$ZZZZZZZZZ$.,NNNNNNNNNNNNNNN= NNNNNNNNNNNNNNN8.NNNNNNNNNNNNNNNNNNNNNNNM M
   .. Z$ZZZZZZZZZ......,NNNNNNNNNN$......NNNNNNNNNNM......NNNNNNNNNNNNNNNNNNNM M
MMMMM ZZZZZZZZZZZZZZZ$..NNNNNNNNNNNNNNN: +NNNNNNNNNNNNNN8.:MNNNNNNNNNNNNNNNNNM M
MMMM.?ZZZZZZZZZZZ$$=.?   :.MNNNNNNNN8.~. .$.INNNNNNNNN.,   ..:MNNNNNNNNNNNNNNM M
MMMM.$Z$ZZZZZZZZZZZ       ..NNNNNNNN  . .   .MNNNNNNN.        ?NNNNNNNNNNNNNNM M
MMM . .Z$ZZZZZZ$Z7.        .NNNNNNM.         MNNNNNN.         ?NNNNNNNNNNNNNNM M
MMM . ..ZZZZZZZZ$      .   .M:NNNN.         .N7?NNN:          ?N:MNNNNNNNNNNNM M
MM:.. ..7ZZZZZZZ$             .MNN.         ..  MNN:    .     =. =NNNNNNNNNNNM M
MM... ..$ZZZZZZZ$             7NNN.   . .     ..NNN:            .NNNNNNNNNNNNM M
M8.::~ZZZZZZZZZZ$           ..MNNN.           .NNNN:            ONNNNNNNNNNNNM M
M.$ZZZZZZZZZZZZZ$ . .     . .NNNNN.   . .     .NNNN:            NNNNNNNNNNNNNM M
M.ZZZZZZZZZZZZZZ$ . .       .NNNNN.         ..NNNNN:          .NNNNNNNNNNNNNNM M
""", random.choice(('RED', 'GREEN', 'BLUE', 'YELLOW', 'CYAN')))


header = [
    [15*" "+"  ____ _       _          ", " _ ", 15*" "+" _ "+18*" "],
    [15*" "+"/ ____| |     | |         ", "| |", 15*" "+"| |"+18*" "],
    [14*" "+"| |  __| | ___ | |__   __ _", "| |", "      ___  __ _| | _____            "],
    [14*" "+"| | |_ | |/ _ \| '_ \ / _\`", "| |", "     / _ \/ _\`| |/ / __|           "],
    [14*" "+"| |__| | | (_) | |_) | (_| ", "| |____", "|  __/ (_| |   <\__ \           "],
    [15*" "+"\_____|_|\___/|_.__/ \__,_", "|______|", "\___|\__,_|_|\_\___/           "],
]

for txt1, l, txt2 in header:
    print colorize(txt1, 'RED') + colorize(l, 'MAGENTA') + colorize(txt2, 'RED')

print '\n'
print colorize('Welcome', 'CYAN'), colorize('to', 'YELLOW'), 'Globa'+colorize('Leaks', 'RED')
print ("Alpha release of GlobaLeaks %s\n"
       "Actually, you may require our supports to makes GL works: irc.freenode.net #globaleaks can help you" %
        GLSetting.version_string)
print ("And don't forget to read docs in: https://github.com/globaleaks/GlobaLeaks/wiki\n")

if GLSetting.start_clean:
    if query_yes_no("Globaleaks --start-clean is going to delete %s\nAre you sure?" % GLSetting.working_path, "no"):
        GLSetting.remove_directories()
elif GLSetting.cmdline_options.kill:
    try:
        with open(GLSetting.pidfile_path, "r") as fd:
            target_pid = int(fd.read())
        os.kill(target_pid, GLSetting.cmdline_options.kill)
        os.remove(GLSetting.pidfile_path)
    except Exception as excep:
        print "Unable kill PID found in %s: kill option ignored (%s)" %\
              (GLSetting.pidfile_path, excep)

##########################
# Security UMASK hardening
os.umask(077)

orig_umask = os.umask

def umask(mask):
    log.debug("attempt to call umask by %s with value %o; forcing umask(077)" % (caller_name(), mask))
    return orig_umask(077)

os.umask = umask
#########################

GLSetting.drop_privileges()
GLSetting.create_directories()
GLSetting.check_directories()

backend_script = os.path.join(GLSetting.root_path, 'globaleaks', 'backend.py')

args = []
args +=['-y', backend_script]
if GLSetting.nodaemon:
    args += ['-n']

# we does not need this due to GLSetting.drop_privileges()
# in fact we need to drop privileges before directory creation
#args +=['--uid', GLSetting.user]
#args +=['--gid', GLSetting.group]args +=['--rundir', GLSetting.working_path]
args +=['--pidfile', GLSetting.pidfile_path]

if GLSetting.twistd_log:
    args +=['--logfile', os.path.join(GLSetting.log_path, 'twistd.log')]
else:
    # logfile can't be disabled in twistd, can only be trashed the content
    args +=['--logfile', os.devnull]

sys.argv[1:] = args


def find_current_db_version(dirpath, filearray):
    """
    """
    glbackend_file_present = 0
    for single_file in filearray:
        if single_file[:len('glbackend')] == 'glbackend':
            glbackend_file_present += 1

    if glbackend_file_present == 0:
        print "glbackend database file not found in %s" % dirpath
        raise StandardError
    elif glbackend_file_present > 1:
        print "glbackend database file found more than 1! keep only the latest in %s" % dirpath
        raise AssertionError

    for single_file in filearray:
        abspath = os.path.join(dirpath, single_file)

        if abspath[-3:] == '.db':

            nameindex = abspath.rfind('glbackend')
            extensindex = abspath.rfind('.db')

            if nameindex + len('glbackend') == extensindex:
                detected_version = 0
            else:
                detected_version = int(
                    abspath[nameindex+len('glbackend-'):extensindex])

            return detected_version, abspath


def check_db_files():
    """
    """
    from globaleaks.db import updater_manager

    try:
        db_dir_path = GLSetting.gldb_path
    except Exception as excep:
        import pdb; pdb.set_trace()

    for (path, dirs, files) in os.walk(db_dir_path):

        try:
            starting_ver, abspath = find_current_db_version(path, files)

            if starting_ver < GLSetting.db_version:
                print "Performing update of Database from version %d to version %d" %\
                      (starting_ver, GLSetting.db_version)
                try:
                    updater_manager.perform_version_update(starting_ver, GLSetting.db_version, abspath)
                    print "GlobaLeaks database version %d: update complete!" % GLSetting.db_version
                except Exception as excep:
                    print "GlobaLeaks database version %d: update failure :(" % GLSetting.db_version
                    quit(-1)

                print "Database version detected: %d" % GLSetting.db_version

        except AssertionError:
            print "Error: More than one database file has been found in %s" % path
            quit(-1)
        except StandardError:
            continue



def run_glbackend():
    log.start_logging()

    sys.excepthook = mail_exception

    config = runner.ServerOptions()
    try:
        config.parseOptions()
    except usage.error, ue:
        print "%s: %s" % (sys.argv[0], ue)
    else:
        print "Starting GlobaLeaks"
        runner.GLBaseRunner(config).run()
        # this is a blocking operation, until app exit
        print "Exiting GlobaLeaks"



# Check DB version and eventually convert them,
# this step is made before the twisted start
check_db_files()


# "And now his watch begins"
run_glbackend()
# "And now his watch is ended"
