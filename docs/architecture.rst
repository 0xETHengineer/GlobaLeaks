=======================
GlobaLeaks Architecture
=======================

0. `Glossary`_
1. `Overview`_
2. `GLBackend`_

    1. `Submission`_
    2. `Storage`_ 
    3. `Status Page`_ (Tip)
    4. `Modules`_

3. `Actors`_
4. `GLClient`_
5. `Application Packaging`_


Glossary
========

`GlobaLeaks`_: is the name of our project, free software, security oriented, flexible whistleblowing platform.

`GLBackend`_: Python software exposing REST interfaces, handling the communications between WB and Receiver, characterized by NodeAdmin configurations and Modules selection.

`NodeAdmin`_: The user which run a GlobaLeaks node.

`Node`_: The name of a single GlobaLeaks installation, configured to handle submissions and notify it to the receivers.

`GlClient`_: User interface for whistleblowers and/or receivers, various implementation are possible (eg: Mobile environment, javascript or machine2machine), calls the REST interface implemented in GLBackend.

`WhistleBlower`_: is the user which perform a submission, containing the information he want communicate outside.

`Context`_: A single topic managed by a Node. A node would have more contests. Every context has differnet internal policy and goals.

`Group`_: The users which receive a Tip, more groups may stay inside the same Context.

`Receivers`_: The final user which receive a Tip, the receiver list is handled by the Group configuration, more receivers may stay inside a group.

`Submission`_: Is the action performed by the WhistleBlower. A submission trigger the creation of various Tip(s), and return a Receipt

`Receipt`_: Is the action performed by the WhistleBlower. A submission trigger the creation of various Tip(s), and return a Receipt

`Tip`_: Every users who need to interact with a submission, access thru a Tip interface: an unique personal and time expiring secret that enable a limited access in the submission.

`Modules`_: Extensions of the original software implementing new features. The modules cover specific extension environment, used to notify a receiver that a new Tip is available. Every Receiver and the NodeAdmin may modify notification settings.

`InputFlow`_: is sequence of action performed by a GL node when a new submission is provided.

`Notification`_: Method used to notify a receiver that a new Tip is available. Every Receiver and the NodeAdmin may modify notification settings.

`Delivery`_: Method used by receiver to download the submitted material, Every Receiver and the NodeAdmin may modify delivery settings.

`File Storage`_: Is the technological interface adopted by the Node when a file need to be saved locally.

`DataBase Storage`_: Is the technological interface adopted by the Node, and inherit by the modules, when is required reas and write over a database table.

Overview
========

GlobaLeaks
``````````

Globaleaks is a project aimed at creating a technology that
enables anyone, even not technically skilled, to setup a
whistleblowing platform. GlobaLeaks, from now on GL, is built
from the groud up with security and privacy by default.

GlobaLeaks should be flexible to most needs and the various
components of GL should be able to exist even on their own
and be developed indipendently.

Node
````

An istance of GlobaLeaks is called *Node* and is setup starting the software called 
`GLBackend`_. GLBackend handles the interaction with all the other sub-components. 
In a Node, three actors play their role. They are: the `WhistleBlower`_, the `Receivers`_ and
the `NodeAdmin`_.

The software communicating with `GLBackend`_ is `GLClient`_, used by those three actors.

**Node code flow**

A node has few goal to achiede: run (by default exposing thru a Tor network) a REST, await for 
`Submission`_ containing `Fields`_ and `Folder`_. The person performing a submission is the
`WhistleBlower`_, and when a submission is completed, the `Node`_ a number of `Tip`_
equal to the amount of receipients of the submitted data.

These recipients are called `Receivers`_, and a `Tip`_ is generated for the whistleblower too.
The new `Tip`_ are notified to the receivers in the way configured by the Node Administrator.

The `Tip`_ have a limited time of life, and during that time, the submitted folder is stored
by the node.

Actors
======

WhistleBlower
`````````````

A person running `GLClient`_, having some data to submit in an appropriate `Context`_. It
perform the `Submission`_, compiling a form of required data (with the options of upload
files). Once the submission is completed receive a `Receipt`_, using this `Receipt`_ can
access to the `Tip`_ generated by their previus submission, and interact (anonymously) with
the Receivers, exchanging `Comments`_ and with the option of upload the `Tip`_ with new files.

NodeAdmin
`````````

A person running `GLClient`_, configuring the local `DataBase Storage`_, configurig the
`Context`_, the `Groups` (that contain the `Receivers`_ descriptions) and configuring the
`Modules`_ for the whistleblowing initiative.

The Node Admin daily job maybe simple `Log`_ reading for verify that the GlobaLeaks system is
working correctly.

Receiver
````````

Receiver is the final destination for the submission process, would be
either someone formed and teched about whistleblowing environment, or
would also be not (depends from initiative working model).

Receiver receive a notification (a communication that update it about
the presence of a new Tip available to be consulted) or a delivery 
(the very submitted data: can be receiver in PUSH mode or in POP, in
example if choosse to download the avail files)

Receiver use `GLClient`_ to access the node and their preference page, if the `NodeAdmin`_ has
enabled the capability for a receiver, to configure a dedicated `Notification`_ and `Delivery`_
module, the receiver may setup a flow that bring the submitted folder via other ways (mail,
IM, remote file copy) whitout the GLClient requirement for the daily usage.

Group
`````

Group is an aggregation of Receiver for technical or personal
shared criteria.

A Receiver don't need to be specified with a specific contact data,
would be specified inside a group, permitting the administrator
to supports different media type for different receivers. In example,
someone would be notified by twitter, and then would be put in
the twitter group. someone other would receive notification via
email, and then is kept in email group. Every group has a different
module handling the contact type.

Group would be also relative a specific kind of receivers, and the
NodeAdmin may choose if permit to the whistleblower the ability 
to select which group interact to.

GLBackend
=========

The backend system will expose a REST interface that allows any
application to interact with it.
The functionalities of `Submission`_, `Storage`_, `Status Page`_
and `Notification`_ and `Delivery`_ should be highly modularized.
GlobaLeaks should be able to function properly even by removing
the `Status Page`_ and `Notification`_ and `Delivery`_ components.

Submission
----------

This interface enables a client to load a submission onto the
GL node. Through this component the client application learns
what fields are supported by the globaleaks nodes and its
properties.

The submission system has anti-spam features allowing to configure a captcha
that is activated once a certain submission/time threshold is reached.

Receipt
```````

Is a secret possessed by the WhistleBlower for access at the Tip, needed 
whenever it want interact with the Tip of its submission.
When a receipt is active (until the Tip expire), its checked to be
unique.
Receipt may be configued differently for the various context.
Maybe disabled (is not returned to the WB), would be implemented
in modules (in the InputFlow hook) permitting to expand security 
functionality.
A receiver may suggest a portion of the Receipt, and the server 
need to add some random segment (a word, a number, etc).
The server sent back the receipt to the users.

Fields
``````

This is the contextual data associated with a submission. The
fields are fetched though an API that tells the client what
their names are and what is the description. The client will
optionally send the submission identifier that has been generated
in the folder upload phase.


Folder
``````

A group or a single file uploaded compose a folder.
Though this interface, a folder can be loaded and composed on the 
Node and associated with a submission. If a submission ID is not 
supplied the application will generate a submission identifier, 
that is then sent once the submission fields are sent.
The data sent to the GL Node will be encrypted client side with
an asymetric crypto system.


Storage
-------

GlobaLeaks should support various different storage mechanisms
The storage interface should be designed in a way that it
is agnostic to the underlying system that will be used to
save the information.
If specified the node administrator should be able to configure
that the infomration stored on the node is encrypted with
his symetric key or the public keys of all the receivers.

Possible storage systems that should be implemented are:
Locally to drive, SCP, online file storage services,
tahoe-lafs.

The two storage subsystem are `DataBase Storage`_ and `File Storage`_.
The differencies between is: *Database storage contain the single node configuration
settings, aloing with temporary data like submissions, submitted files and log*, and *File storage contain the generic GLBackend data*

File Storage
````````````

It's a directory containing: *static*, all the static page that maybe server by GLBackend, *localization*, the .pot file translated when GLBackend is dispatched, one (small and limited) sqlite file: baseconf.sqlite (protected with the startup password, using a default sqlcipher)

**baseconf.sqlite** specify which kind of module are enabled to handle the `DataBase Storage`_ and
some basing information that the administrator would manage during this configuration. 
This database has the sole pourpose to specify which kind of module is used to protect
and manage the `DataBase Storage`_, whenever the module is changed (does not exist a default),
GLBackend handle the migration of content.

The modules specified shall provide a special filesystem interface, or a dedicated database
interface, its a generic interface that can provide security for storing the data in a
flexible way.

DataBase Storage
````````````````

All the data generated by a single instane goes in this database. Logs, configuration,
temporary informations, submission and files too.
The database interface is handled by the module specified in `File Storage`_ baseconf.sqlite,
and all the modules in GLBackend access to this database.

DataBase Storage may be implemented by a various way, dependings on the backup, security and 
reliability that the node admin prefer for their threat model.

Those interface would be loaded as first element after the access in baseconf.sqlite, and then
the entire database would be accessible for the GLBackend.

Console utils
`````````````

Having a chain of security and a layer of database, we provide console utilities, a simple interface able to dump sections of the database, would help debug, maintainance and developers.

Tip
---
Status Page
-----------

This is the page that keeps track of a client submission. Is enables
both `Receivers`_ and WB to access a submission that is present on
a GL Node. This interface will return the list of fields with
their value. This page will also be called Tip.

Comments
````````

Each Tip also has a comment board that allows secure communication
between the `Receivers`_ and the WB. The `Receivers`_ can use this to get
extra information on the submission and prompt the WB to upload new
material.

Statistics
``````````

Every time a `Receivers`_ visits a Tip page and downloads some material
the view and download counters are incremented. It is possible to
interrogate to get a list of views for every `Receivers`_ from any
authenticated `Receivers`_ Tip page.

Deletion
````````

A `Receivers`_ is able to delete any Tip associated with his profile.
When all the `Receivers`_ have deleted there Tips or all of them have
expired the material is removed and the database in cleaned of the
submission entry.

Security
````````

As the modular ability of GlobaLeaks permit, the most of the secury 
feature would be enabled selecting an appropriate module.
By theory, a Node Administrator need a threat model for their 
initiative, and need to select the security features properly.

Security feature can range between an enforcing policy of configuration,
example: permit only submission thru Tor network instead of Tor2Web 
users, or, permit only submision with a receipt long almost 16 bytes.

Or Security feature can cover issue related in receiver communication,
like, enabling a module that disable all the receiver who have not
yet upload a public GPG key, for receive secure notifications.

Receipt security
````````````````

Receipt has the property to be unique for every node. A node with tons of
submission, anyway need unique receipt for every WB Tip.
This cause that the receipt can't be choosed by the users, but need to 
be (partially or totally) generated by the node, in order to avoid collisions

A Node can be configured for: do not release Receipt (WB has not further
access to their submission), generate an entire new Receipt (like the emulation
of one or more phone number, for be save in the address book) or generate a
partially choosen receipt, in example, if the WB choose "RobotUnicorn" the
server would accept it, add a random number or string, and communicate back to
the WB: "RobotUnicorn-45625".

Modules
-------

Beside the `DataBase Storage`_ modules defined in the `Storage`_ section, GLBackend 
provide flexibility for the administrator needs.

All the modules are present in the code base of GLBackend, need to be enabled by the
administrator, and require some detailed configuration.

Module are self contained operation and they provide extension of basic GLBackend operations,
some default modules are provided in the base configuration.

The Modules descripted below cover the four section of GLBackend thar require more different
supports in different whistleblowing environment, they are: `Notification`_ and `Delivery`_,
`InputFlow`_ and `Groups`_.

Every module may required some specific settings to run properly, and may be provided by the
Node administrator (and by a receiver in rare cases). Modules have a series of fields that
would be printed in the appropriate page for be configured before be activated.

Notification
````````````

Notification is the procedure of notify to a `Receivers`_ that a new `Tip`_ is available.
Also update of the `Tip`_ status may be notified (new comment, new folder, tip soon to expire,
etc)
Notification by default is an email sent by GLBackend, for support this system node
administrator need to configure a SMTP server in the notification module.
Every notification module may support different communication system (twitter, facebook,
IM,...) and the goal of the notification system is to deliver the `Tip`_ code to the
recipient.

Notification modules enabled by the administrator may require some configuration.
Notification modules accessible and configurable by receiver may required some configuration
settings provided by the end user (in example: the public GPG key, if the receiver is
requesting for encrypted notification)


Delivery
````````
Delivery is the procedure of shipping the files and the descriptive fields from the Node to
the Receiver. The default delivery is *local delivery* and mean that a receiver goes in the
appropriate `Tip`_ page, download the files and eventually write comments, leave pertinence
evalueation, of operate in the Tip properly.

Modules of delivery may include a remote copy of the file (remind: is a per-receiver
configuration, not a system wide setting), download of encrypted zip files, or just everything
is required to the receiver to get the files in a way he believe as safe.

The configuration degree (enabled and set by admin, and then customized by receiver), is the
same as descripted in notification.

InputFlow
`````````

InputFlow is the name given to the module that manage the various check 
performed when a submission is receiver, or under the process of 
being accepted. Those modules can expose addictional REST interfaces.

Groups
``````

Are described in `Group`_ section, those modules handle the different kind of receiver that can
be configured as submission recipients. 
These modules can manage the differencies lies between the users of a remote ticketing system, or just 
local user with a dedicated notification and delivery sequence. 
Some properties of the local users would be stored (the maximum amount of download, or access to the Tip, 
and stored statistic related) while some remote user would not have it, or not being an user at all.

A submission maybe addressed to the selected group, or this option may not be exposed to the
whistleblower, and then all the available group would be addressed for their contacts, and
then, using the settings stored into, the information would be dispatched.

This dispatch, may or may not supports flexible delivery or notification settins, those 
settings are recorded per users, and group supporting also remote users, would not include
settings that for sure would not be used.

GLClient
========

The UI should be a separated component that is able to hook up the GL
backend. The main UI will be developed in JavaScript and it will allow
for WB to securely submit data. 

The client adapt in automatic way to the node supports and mandatory 
fields.

The localized texts apre provided by the server and the language are
selected only client side.

Application Packaging
=====================

Application Packaging would be provided by the Tor project, sponsored 
by Google Summer Of Code, called APAF (Anonymous Python Application
Framework): https://github.com/mmaker/APAF
