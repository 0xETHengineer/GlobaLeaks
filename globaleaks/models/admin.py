from storm.twisted.transact import transact
from storm.locals import *
import pickle
from globaleaks.utils import gltime, idops

from globaleaks.models.base import TXModel
from globaleaks.models.receiver import Receiver

__all__ = [ 'SystemSettings', 'Context', 'ModulesProfiles',
            'AdminStats', 'LocalizedTexts', 'ReceiverContext',
            'Node']

class SystemSettings(TXModel):
    """
    This table represent the settings choosen System-wide
    """
    __storm_table__ = 'systemsettings'

    """
    To be defined and specified:
    public_key,
    leakdirectory_entry
    """

    id = Int(primary=True)
    psublic_key = Unicode()
    name = Unicode()
    creation_time = DateTime()
    description = Unicode()
    public_site = Unicode()
    hidden_service = Unicode()
    url_schema = Unicode()
    leakdirectory_entry = Unicode()
    private_stats_delta = Int()
    public_stata_delta = Int()

    """
    This table has only one instance, has the "id", but would not exists a second element
    of this table. This table act, more or less, like the configuration file of the previous
    GlobaLeaks release (and some of the GL 0.1 details are specified in Context)
    """

class ModulesProfiles(TXModel):
    """
    remind: may exists more module profiles, also for the same module, in this
    case, the module_id variable (generated by idops.random_module_id) is different
    between them.

    this is a collection of profile, therefore may exists some entry having configuration
    not used in a context, and other entry used.
    The module_id is addressed in Context.notification_profiles, Context.delivery_profiles
    and Context.inputfilter_chain
    """

    __storm_table__ = 'modules'

    id = Int(primary=True)
    description = Unicode()

    type = Unicode() # notification | delivery | inputfilter

    admin_fields = Unicode()
    user_fields = Unicode()
    module_gus = Unicode()


class AdminStats(TXModel):
    """
    every entry is the collection of the elements in the last
    node.private_stats_delta (expressed in minutes)
    """
    __storm_table__ = 'adminstats'

    id = Int(primary=True)

    receiver_access = Int()
    download = Int()
    submission = Int()
    whistleblower_access = Int()

    download_forbidden = Int()
        # count of the download tried but deny for be expired

    access_forbidden = Int()
    removed_submission = Int()

    """
    This statistics for admininistrator, can be easily expanded, keeping track also which kind of submission
    has been forbidden, expire, created, downloaded, etc. Can be a detailed monitor of the activities.
    """

class LocalizedTexts(TXModel):
    """
    need to be defined an API, that permit the admin, to convert all the description texts and
    localize them
    """
    __storm_table__ = 'localizedtexts'

    id = Int(primary=True)
    reference = Pickle()
    translated = Pickle()

    """
    need to be defined with the Client and in the API, but most likely would be
    a struct like the POT file, pickled in the database, and managed by administrators input
    """

class ReceiverContext(TXModel):
    __storm_table__ = 'receivers_context'

    __storm_primary__ = "context_id", "receiver_id"

    context_id = Int()
    receiver_id = Int()

class Context(TXModel):
    __storm_table__ = 'contexts'


    id = Int(primary=True)

    node_id = Int()
    context_id = Unicode()

    name = Unicode()
    description = Unicode()
    fields = Pickle()
    selectable_receiver = Bool()

    escalation_threshold = Int()
    languages_supported = Pickle()

    langs = Pickle()

    creation_time = DateTime()
    last_activity = DateTime()

    selectable_receiver = Bool()
    escalation_threshold = Int()

    tip_max_access = Int()
    tip_timetolive = Int()
    folder_max_download = Int()

    notification_profiles = Pickle()
    delivery_profiles = Pickle()
    inputfilter_chain = Pickle()

    @transact
    def new(self, context_dict):
        store = self.getStore()

        context = Context()

        context.creation_date = gltime.utcDateNow()
        context.update_date = gltime.utcDateNow()
        context.context_id = idops.random_context_id()

        context.name = context_dict["name"]
        context.description = context_dict["description"]
        context.selectable_receiver = context_dict["selectable_receiver"]

        context.escalation_threshold = context_dict["escalation_threshold"]
        context.languages_supported = context_dict["languages_supported"]

        context.fields = context_dict["fields"]

        for recv in context_dict["receivers"]:
            receiver = store.find(Receiver,
                        Receiver.receiver_id==recv['id']).one()
            context.receivers.add(receiver)

        store.add(context)
        store.commit()
        store.close()
        return context_dict

    def generate_description_dict(self, receivers):
        description_dict = {"id": self.context_id,
                            "name": self.name,
                            "description": self.description,
                            "selectable_receiver": self.selectable_receiver,
                            "escalation_threshold": self.escalation_threshold,
                            "languages_supported": self.languages_supported,
                            "fields": self.fields,
                            "receivers": receivers
        }
        return description_dict


    def list_receiver_dicts(self):
        receiver_dicts = []
        for receiver in self.receivers:
            receiver_dict = {"id": receiver.receiver_id,
                    "can_delete_submission": receiver.can_delete_submission,
                    "can_postpone_expiration": receiver.can_postpone_expiration,
                    "can_configure_notification": receiver.can_configure_notification,
                    "can_configure_delivery": receiver.can_configure_delivery,
                    "can_trigger_escalation": receiver.can_trigger_escalation,
                    "name": receiver.name,
                    "description": receiver.description,

                    # one language is the default
                    "languages_supported": receiver.languages_supported
            }
            receiver_dicts.append(receiver_dict)
        return receiver_dicts


    def create_receiver_tips(self, internaltip):
        receiver_tips = []
        for receiver in self.receivers:
            receiver_tip = ReceiverTip()
            receiver_tip.new(internaltip.internaltip_id)
            receiver_tips.append(receiver_tip)
        return receiver_tips

    @transact
    def list_description_dicts(self):
        store = self.getStore()
        dicts = []
        result = store.find(Context)
        for context in result:
            dd = context.generate_description_dict(context.list_receiver_dicts())
            dicts.append(dd)
        store.commit()
        store.close()
        return dicts

    @transact
    def add_receiver(self, context_id, receiver_id):
        store = self.getStore()

        receiver = store.find(Receiver,
                        Receiver.receiver_id==receiver_id).one()
        context = store.find(Context,
                        Context.context_id==context_id).one()

        context.receivers.add(receiver)

        store.commit()
        store.close()

Context.receivers = ReferenceSet(Context.id,
                             ReceiverContext.context_id,
                             ReceiverContext.receiver_id,
                             Receiver.id)

class Node(TXModel):
    __storm_table__ = 'node'

    id = Int(primary=True)

    statistics = Pickle()
    properties = Pickle()
    description = Unicode()
    name = Unicode()
    public_site = Unicode()
    hidden_service = Unicode()

    @transact
    def list_contexts(self):
        pass

Node.contexts = ReferenceSet(Node.id, Context.node_id)


