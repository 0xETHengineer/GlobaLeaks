from storm.twisted.transact import transact
# -*- encoding: utf-8 -*-
#
# :authors: Arturo Filast√≤
# :licence: see LICENSE

from storm.locals import Int, Pickle
from storm.locals import Unicode, Bool, DateTime
from storm.locals import ReferenceSet, Reference

from globaleaks.utils import gltime, idops

from globaleaks.models.base import TXModel
from globaleaks.models.receiver import Receiver
from globaleaks.models.node import Node
from globaleaks.utils import log


__all__ = [ 'Context', 'ModulesProfiles',
            'AdminStats', 'LocalizedTexts', 'ReceiverContext' ]

class ModulesProfiles(TXModel):
    """
    remind: may exists more module profiles, also for the same module, in this
    case, the module_gus variable (generated by idops.random_module_gus) is different
    between them.

    this is a collection of profile, therefore may exists some entry having configuration
    not used in a context, and other entry used.
    The module_gus is addressed in Context.notification_profiles, Context.delivery_profiles
    and Context.inputfilter_chain
    """
    log.debug("[D] %s %s " % (__file__, __name__), "Class ModulesProfiles")
    __storm_table__ = 'modules'

    module_gus = Unicode(primary=True)
    description = Unicode()
    module_name = Unicode()
    module_description = Unicode()

    type = Unicode() # notification | delivery | inputfilter

    admin_fields = Unicode()
    user_fields = Unicode()


class AdminStats(TXModel):
    """
    every entry is the collection of the elements in the last
    node.private_stats_delta (expressed in minutes)
    """
    log.debug("[D] %s %s " % (__file__, __name__), "Class AdminStats")
    __storm_table__ = 'adminstats'

    id = Int(primary=True)
        # XXX: perhaps related to Context.context_gus ?

    receiver_access = Int()
    download = Int()
    submission = Int()
    whistleblower_access = Int()

    download_forbidden = Int()
        # count of the download tried but deny for be expired

    access_forbidden = Int()
    removed_submission = Int()

    """
    This statistics for admininistrator, can be easily expanded, keeping track also which kind of submission
    has been forbidden, expire, created, downloaded, etc. Can be a detailed monitor of the activities.
    """

class LocalizedTexts(TXModel):
    """
    need to be defined an API, that permit the admin, to convert all the description texts and
    localize them
    """
    log.debug("[D] %s %s " % (__file__, __name__), "Class LocalizedTexts")
    __storm_table__ = 'localizedtexts'

    id = Int(primary=True)
    reference = Pickle()
    translated = Pickle()

    """
    need to be defined with the Client and in the API, but most likely would be
    a struct like the POT file, pickled in the database, and managed by administrators input
    """

class ReceiverContext(TXModel):
    log.debug("[D] %s %s " % (__file__, __name__), "Class ReceiverContext")
    __storm_table__ = 'receivers_context'
    __storm_primary__ = "context_gus", "receiver_gus"

    context_gus = Int()
    # holy shit, here receiver_gus is an Int, not a Unicode()/globaleaks uniq string
    receiver_gus = Int()

class Context(TXModel):
    __storm_table__ = 'contexts'

    context_gus = Unicode(primary=True)
    node_id = Int()
    node = Reference(node_id, Node.id)

    name = Unicode()
    description = Unicode()
    fields = Pickle()
    selectable_receiver = Bool()

    escalation_threshold = Int()
    languages_supported = Pickle()

    langs = Pickle()

    creation_time = DateTime()
    last_activity = DateTime()

    selectable_receiver = Bool()
    escalation_threshold = Int()

    tip_max_access = Int()
    tip_timetolive = Int()
    folder_max_download = Int()

    notification_profiles = Pickle()
    delivery_profiles = Pickle()
    inputfilter_chain = Pickle()

    @transact
    def new(self, context_dict):
        log.debug("[D] %s %s " % (__file__, __name__), "Context new", context_dict)

        store = self.getStore('context new')

        context = Context()

        context.creation_date = gltime.utcDateNow()
        context.update_date = gltime.utcDateNow()
        context.context_gus = idops.random_context_gus()

        context.name = context_dict["name"]
        context.description = context_dict["description"]
        context.selectable_receiver = context_dict["selectable_receiver"]

        context.escalation_threshold = context_dict["escalation_threshold"]
        context.languages_supported = context_dict["languages_supported"]

        context.fields = context_dict["fields"]

        # the receiver is not added here

        store.add(context)
        store.commit()
        store.close()
        return context_dict

    def generate_description_dict(self, receivers):

        log.debug("[D] %s %s " % (__file__, __name__), "Context generate_description_dict")

        description_dict = {"context_gus": self.context_gus,
                            "name": self.name,
                            "description": self.description,
                            "selectable_receiver": self.selectable_receiver,
                            "escalation_threshold": self.escalation_threshold,
                            "languages_supported": self.languages_supported,
                            "fields": self.fields,
                            "receivers": receivers
        }
        return description_dict


    def receiver_dicts(self):
        log.debug("[D] %s %s " % (__file__, __name__), "Context receiver_dicts")

        receiver_dicts = []
        for receiver in self.receivers:
            receiver_dict = {"receiver_gus": receiver.receiver_gus,
                    "can_delete_submission": receiver.can_delete_submission,
                    "can_postpone_expiration": receiver.can_postpone_expiration,
                    "can_configure_notification": receiver.can_configure_notification,
                    "can_configure_delivery": receiver.can_configure_delivery,
                    "can_trigger_escalation": receiver.can_trigger_escalation,
                    "name": receiver.name,
                    "description": receiver.description,

                    # one language is the default
                    "languages_supported": receiver.languages_supported
            }
            receiver_dicts.append(receiver_dict)
        return receiver_dicts


    def create_receiver_tips(self, internaltip):
        log.debug("[D] %s %s " % (__file__, __name__), "Context create_receiver_tips", internaltip)

        receiver_tips = []
        for receiver in self.receivers:
            from globaleaks.models.tip import ReceiverTip
            receiver_tip = ReceiverTip()
            receiver_tip.new(internaltip.internaltip_id)
            receiver_tips.append(receiver_tip)
        return receiver_tips

    @transact
    def list_description_dicts(self):
        log.debug("[D] %s %s " % (__file__, __name__), "Context list_description_dicts")

        store = self.getStore('context, list_description_dict')
        dicts = []
        result = store.find(Context)
        for context in result:
            dd = context.generate_description_dict(context.receiver_dicts())
            dicts.append(dd)

        store.commit()
        store.close()
        return dicts

    @transact
    def add_receiver(self, context_gus, receiver_gus):
        log.debug("[D] %s %s " % (__file__, __name__), "Context add_receiver")

        store = self.getStore('add_receivers')

        receiver = store.find(Receiver,
                        Receiver.receiver_gus==receiver_gus).one()
        context = store.find(Context,
                        Context.context_gus==context_gus).one()

        context.receivers.add(receiver)

        store.commit()
        store.close()

Context.receivers = ReferenceSet(Context.context_gus,
                             ReceiverContext.context_gus,
                             ReceiverContext.receiver_gus,
                             Receiver.receiver_gus)


