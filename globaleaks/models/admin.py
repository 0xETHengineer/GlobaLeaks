from storm.twisted.transact import transact
from storm.locals import *
import pickle

from globaleaks.models.base import TXModel
from globaleaks.models.receiver import Receiver

__all__ = [ 'SytemSettings', 'Contexts', 'ModulesProfiles',
            'AdminStats', 'LocalizedTexts']

class SystemSettings(TXModel):
    """
    This table represent the settings choosen System-wide
    """
    __storm_table__ = 'systemsettings'

    createQuery = "CREATE TABLE " + __storm_table__ +\
                  "(id INTEGER PRIMARY KEY, public_key VARCHAR, name VARCHAR, "\
                  " creation_time DATETIME, description VARCHAR, pubic_site VARCHAR, "\
                  " hidden_service VARCHAR, url_schema VARCHAR, "\
                  " leakdirectory_entry VARCHAR, private_stats_delta INT, public_stats_delta INT)"

    """
    To be defined and specified:
    public_key,
    leakdirectory_entry
    """

    id = Int(primary=True)
    psublic_key = Unicode()
    name = Unicode()
    creation_time = DateTime()
    description = Unicode()
    public_site = Unicode()
    hidden_service = Unicode()
    url_schema = Unicode()
    leakdirectory_entry = Unicode()
    private_stats_delta = Int()
    public_stata_delta = Int()

    """
    This table has only one instance, has the "id", but would not exists a second element
    of this table. This table act, more or less, like the configuration file of the previous
    GlobaLeaks release (and some of the GL 0.1 details are specified in Context)
    """


class Contexts(TXModel):

    __storm_table__ = 'contexts'

    createQuery = "CREATE TABLE " + __storm_table__ +\
                   "(id INTEGER PRIMARY KEY, context_gus VARCHAR, name VARCHAR, "\
                   " desciption VARCHAR, fields VARCHAR, creation_time DATETIME, "\
                   " last_activity DATETIME, selectable_receiver BOOL, "\
                   " escalation_threshold INT, langs VARCHAR, receivers VARCHAR, "\
                   " notification_profiles VARCHAR, delivery_profiles VARCHAR, "\
                   " inputfilter_chain VARCHAR, tip_max_access INT, folder_max_download INT," \
                   " tip_timetolive INT)"

    """
    Remind: langs do not contain the language supported by the node, but the
            aggregate information of the languages supported by receivers knowledge
    """

    id = Int(primary=True)
    context_gus = Unicode()

    name = Unicode()
    description = Unicode()

    fields = Pickle()
    receivers = Pickle()
    langs = Pickle()

    creation_time = DateTime()
    last_activity = DateTime()

    selectable_receiver = Bool()
    escalation_threshold = Int()

    tip_max_access = Int()
    tip_timetolive = Int()
    folder_max_download = Int()

    notification_profiles = Pickle()
    delivery_profiles = Pickle()
    inputfilter_chain = Pickle()

    """
    the following add_receiver has not been reviewed during the refactor
    """
    @transact
    def add_receiver(self, context_id, receiver_id):
        store = self.getStore()

        receiver = store.find(Receiver,
            Receiver.receiver_id==receiver_id).one()
        context = store.find(Context,
            Context.context_id==context_id).one()

        context.receivers.add(receiver)

        store.commit()
        store.close()


class ModulesProfiles(TXModel):
    """
    remind: may exists more module profiles, also for the same module, in this
    case, the module_id variable (generated by idops.random_module_id) is different
    between them.

    this is a collection of profile, therefore may exists some entry having configuration
    not used in a context, and other entry used.
    The module_id is addressed in Context.notification_profiles, Context.delivery_profiles
    and Context.inputfilter_chain
    """

    __storm_table__ = 'modules'

    createQuery = "CREATE TABLE " + __storm_table__ +\
                   "(id INTEGER PRIMARY KEY, description VARCHAR, type VARCHAR, "\
                   " admin_fields VARCHAR, user_fields VARCHAR, active BOOL, module_gus VARCHAR)"

    id = Int(primary=True)
    description = Unicode()

    type = Unicode() # notification | delivery | inputfilter

    admin_fields = Unicode()
    user_fields = Unicode()
    module_gus = Unicode()


class AdminStats(TXModel):
    """
    every entry is the collection of the elements in the last
    node.private_stats_delta (expressed in minutes)
    """
    __storm_table__ = 'adminstats'

    createQuery = "CREATE TABLE " + __storm_table__ +\
                   "(id INTEGER PRIMARY KEY, receiver_access INT, submissions INT, download INT, whistleblower_access INT," \
                   " download_forbidden INT, access_forbidden INT, removed_submissions INT)"

    id = Int(primary=True)

    receiver_access = Int()
    download = Int()
    submission = Int()
    whistleblower_access = Int()

    download_forbidden = Int()
        # count of the download tried but deny for be expired

    access_forbidden = Int()
    removed_submission = Int()

    """
    This statistics for admininistrator, can be easily expanded, keeping track also which kind of submission
    has been forbidden, expire, created, downloaded, etc. Can be a detailed monitor of the activities.
    """

class LocalizedTexts(TXModel):
    """
    need to be defined an API, that permit the admin, to convert all the description texts and
    localize them
    """
    __storm_table__ = 'adminstats'

    createQuery = "CREATE TABLE " + __storm_table__ +\
                  "(id INTEGER PRIMARY KEY, reference VARCHAR, translated VARCHAR)"

    id = Int(primary=True)
    reference = Pickle()
    translated = Pickle()

    """
    need to be defined with the Client and in the API, but most likely would be
    a struct like the POT file, pickled in the database, and managed by administrators input
    """

class ReceiverContext(TXModel):
    __storm_table__ = 'receivers_context'

    __storm_primary__ = "context_id", "receiver_id"

    createQuery = "CREATE TABLE " + __storm_table__ +\
                   "(context_id INTEGER, receiver_id INTEGER, "\
                   " PRIMARY KEY (context_id, receiver_id))"

    context_id = Int()
    receiver_id = Int()

class Context(TXModel):
    __storm_table__ = 'contexts'

    createQuery = "CREATE TABLE " + __storm_table__ +\
                   "(id INTEGER PRIMARY KEY, node_id INT,"\
                   " context_id VARCHAR, "\
                   " name VARCHAR, description VARCHAR, "\
                   " fields VARCHAR, selectable_receiver INT, "\
                   " receivers VARCHAR, escalation_threshold INT, "\
                   " languages_supported VARCHAR)"

    id = Int(primary=True)

    node_id = Int()
    context_id = Unicode()

    name = Unicode()
    description = Unicode()
    fields = Pickle()
    selectable_receiver = Bool()

    escalation_threshold = Int()
    languages_supported = Pickle()

    @transact
    def add_receiver(self, context_id, receiver_id):
        store = self.getStore()

        receiver = store.find(Receiver,
                        Receiver.receiver_id==receiver_id).one()
        context = store.find(Context,
                        Context.context_id==context_id).one()

        context.receivers.add(receiver)

        store.commit()
        store.close()

Context.receivers = ReferenceSet(Context.id,
                                 ReceiverContext.context_id,
                                 ReceiverContext.receiver_id,
                                 Receiver.id)
class Node(TXModel):
    __storm_table__ = 'node'

    createQuery = "CREATE TABLE " + __storm_table__ +\
                   "(id INTEGER PRIMARY KEY, contexts VARCHAR,"\
                   " properties VARCHAR, description VARCHAR, "\
                   " name VARCHAR, public_site VARCHAR, "\
                   " hidden_service VARCHAR)"

    id = Int(primary=True)

    statistics = Pickle()
    properties = Pickle()
    description = Unicode()
    name = Unicode()
    public_site = Unicode()
    hidden_service = Unicode()

    @transact
    def list_contexts(self):
        pass

Node.contexts = ReferenceSet(Node.id, Context.node_id)


